devtools::document()
devtools::document()
devtools::document()
devtools::check()
Rcpp::sourceCpp("src/homeworkRcpp.cpp")
Rcpp::sourceCpp("src/homeworkRcpp.cpp")
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::build_vignettes()
.Last.error.trace
devtools::build_vignettes()
.Last.error.trace
library(Rcpp)
# Write an Rcpp function for Exercise 9.8
sourceCpp(code='
#include <cmath>
#include <Rcpp.h>
using namespace Rcpp;
//[[Rcpp::export]]
NumericMatrix gibbsC(int n, int a, int b, int M){
NumericMatrix mat(M, 2);
double x1=0;
double x2=0.5;
double alpha=0;
double beta=0;
for(int i=0 ; i < M; i++){
x1 = rbinom(1, n, x2)[0];
alpha = x1 + a;
beta = n - x1 + b;
x2 = rbeta(1, alpha, beta)[0];
mat(i,0) = x1;
mat(i,1) = x2;
}
return(mat);
}
')
# Write an R function for Exercise 9.8
gibbsR <- function(n,a,b,M){
X <- matrix(0,nrow = M, ncol = 2)
X[1,] <- c(0, .5)
for (i in 2:M) {
x2 <- X[i-1, 2]
X[i,1] <- rbinom(1, n, x2)
x1 <- X[i,1]
alpha <- x1+a
beta <- n-x1+b
X[i,2] <- rbeta(1, alpha, beta)
}
return(X)
}
#Compare the corresponding generated random numbers
set.seed(9903)
n <- 20;a <- 2; b <- 4
M <- 3500
burn <- 500
c <- burn + 1
randomnum.R <- gibbsR(n,a,b,M)[c:M, ]
randomnum.C <- gibbsC(n,a,b,M)[c:M, ]
par(mfrow=c(1,2))
qqplot(randomnum.R[,1], randomnum.C[,1],main="", xlab = "X with pure R language", ylab = "x with Rcpp function")
abline(a=0,b=1,col='blue', lwd=2)
qqplot(randomnum.R[,2], randomnum.C[,2],main="", xlab = "Y with pure R language", ylab = "Y with Rcpp function")
abline(a=0,b=1,col='blue', lwd=2)
#Compare the computation time
library(microbenchmark)
times <- microbenchmark(tm.R=gibbsR(n,a,b,M),tm.c=gibbsC(n,a,b,M))
table <- summary(times)
knitr::kable(table, align = "c")
library(Rcpp)
# Write an Rcpp function for Exercise 9.8
sourceCpp(code='
#include <Rcpp.h>
using namespace Rcpp;
//[[Rcpp::export]]
NumericMatrix gibbsC(int n, int a, int b, int M){
NumericMatrix mat(M, 2);
double x1=0;
double x2=0.5;
double alpha=0;
double beta=0;
for(int i=0 ; i < M; i++){
x1 = rbinom(1, n, x2)[0];
alpha = x1 + a;
beta = n - x1 + b;
x2 = rbeta(1, alpha, beta)[0];
mat(i,0) = x1;
mat(i,1) = x2;
}
return(mat);
}
')
# Write an R function for Exercise 9.8
gibbsR <- function(n,a,b,M){
X <- matrix(0,nrow = M, ncol = 2)
X[1,] <- c(0, .5)
for (i in 2:M) {
x2 <- X[i-1, 2]
X[i,1] <- rbinom(1, n, x2)
x1 <- X[i,1]
alpha <- x1+a
beta <- n-x1+b
X[i,2] <- rbeta(1, alpha, beta)
}
return(X)
}
#Compare the corresponding generated random numbers
set.seed(9903)
n <- 20;a <- 2; b <- 4
M <- 3500
burn <- 500
c <- burn + 1
randomnum.R <- gibbsR(n,a,b,M)[c:M, ]
randomnum.C <- gibbsC(n,a,b,M)[c:M, ]
par(mfrow=c(1,2))
qqplot(randomnum.R[,1], randomnum.C[,1],main="", xlab = "X with pure R language", ylab = "x with Rcpp function")
abline(a=0,b=1,col='blue', lwd=2)
qqplot(randomnum.R[,2], randomnum.C[,2],main="", xlab = "Y with pure R language", ylab = "Y with Rcpp function")
abline(a=0,b=1,col='blue', lwd=2)
#Compare the computation time
library(microbenchmark)
times <- microbenchmark(tm.R=gibbsR(n,a,b,M),tm.c=gibbsC(n,a,b,M))
table <- summary(times)
knitr::kable(table, align = "c")
devtools::build_vignettes()
.Last.error.trace
library(StatComp21001)
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build(vignettes = FALSE)
install.packages('../StatComp21001_1.0.tar.gz', repos = NULL)
